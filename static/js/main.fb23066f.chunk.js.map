{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","section","_templateObject","Logo","h1","_templateObject2","data","x","y","size","dataArr","map","d","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","barData","bubbleData","react_default","a","createElement","className","es","margin","left","top","bottom","xType","height","width","position","title","tickLabelAngle","opacity","strokeWidth","sizeRange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"g/BAYA,IAAMA,EAAUC,IAAOC,QAAVC,KAgBPC,EAAOH,IAAOI,GAAVC,KAmBJC,EAAO,CACX,CAAEC,EAAG,QAASC,EAAG,MAAOC,KAAM,QAC9B,CAAEF,EAAG,UAAWC,EAAG,MAAOC,KAAM,QAChC,CAAEF,EAAG,SAAUC,EAAG,MAAOC,KAAM,QAC/B,CAAEF,EAAG,QAASC,EAAG,KAAMC,KAAM,QAC7B,CAAEF,EAAG,KAAMC,EAAG,KAAMC,KAAM,QAC1B,CAAEF,EAAG,WAAYC,EAAG,KAAMC,KAAM,OAChC,CAAEF,EAAG,cAAeC,EAAG,KAAMC,KAAM,OACnC,CAAEF,EAAG,SAAUC,EAAG,KAAMC,KAAM,OAC9B,CAAEF,EAAG,UAAWC,EAAG,KAAMC,KAAM,OAC/B,CAAEF,EAAG,cAAeC,EAAG,KAAMC,KAAM,QAG/BC,EAAUJ,EAAKK,IAAI,SAACC,GACxB,MAAO,CACLL,EAAGK,EAAEL,EACLC,EAAGI,EAAEH,KACLA,KAAMG,EAAEH,QAwDGI,cAlDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,QAASjB,EACTkB,WAAYd,GAJGK,wEAUjB,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACxB,EAAD,iDACEsB,EAAAC,EAAAC,cAAC5B,EAAD,KACE0B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,gCACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEC,OAAQ,CAAEC,KAAM,IAAKC,IAAK,GAAIC,OAAQ,KACtCC,MAAM,UACNC,OAAQ,IAAKC,MAAO,KACpBX,EAAAC,EAAAC,cAACE,EAAA,EAAD,MACAJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,MACAJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOQ,SAAS,SAASC,MAAM,aAAaC,gBAAiB,KAC7Dd,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOQ,SAAS,SAASC,MAAM,oCAC/Bb,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEW,QAAQ,MACRlC,KAAMY,KAAKI,MAAMC,YAGvBE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,wCACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,OAAQ,CAAEC,KAAM,IAAKC,IAAK,GAAIC,OAAQ,KAAOC,MAAM,UACzDC,OAAQ,IAAKC,MAAO,KACpBX,EAAAC,EAAAC,cAACE,EAAA,EAAD,MACAJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,MACAJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOQ,SAAS,SAASC,MAAM,UAAUC,gBAAiB,KAC1Dd,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOQ,SAAS,SAASC,MAAM,yCAC/Bb,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEY,YAAa,EACbD,QAAQ,MACRE,UAAW,CAAC,EAAG,IAAKpC,KAAMY,KAAKI,MAAME,wBAzCnCmB,aCzDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fb23066f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport '../node_modules/react-vis/dist/style.css';\nimport { XYPlot, VerticalBarSeries, MarkSeries, VerticalGridLines, HorizontalGridLines, XAxis, YAxis } from 'react-vis';\n\n//Total length of motorways. (kilometers) (y)\n//data is obtained from https://twitter.com/spectatorindex/status/1100976386326425600\n\n//country area sq. kms (size)\n//data is obtained from https://en.wikipedia.org/wiki/List_of_European_countries_by_area\n\nconst Wrapper = styled.section`\n  padding: 1em;\n  background: white;\n  display:flex;\n  flex-direction:row;\n  font-size: 2rem;\n  margin-left: 2rem;\n  position: relative;\n  z-index: 2;\n  @media (max-width: 1300px) {\n    margin: 0;\n    text-align: center;\n  }\n`;\n\n\nconst Logo = styled.h1`\n  font-size: 3rem;\n  //margin-left: 2rem;\n  position: relative;\n  z-index: 2;\n  //transform: skew(-7deg);\n \n    padding: 0.5rem 1rem;\n    background: midnightblue;\n    color: white;\n    text-transform: uppercase;\n    text-decoration: none;\n \n    @media (max-width: 1300px) {\n    margin: 0;\n    text-align: center;\n  }\n`;\n\nconst data = [\n  { x: 'Spain', y: 15444, size: 498468 },\n  { x: 'Germany', y: 12996, size: 357386 },\n  { x: 'France', y: 11612, size: 551695 },\n  { x: 'Italy', y: 6943, size: 301338 },\n  { x: 'UK', y: 3768, size: 248532 },\n  { x: 'Portugal', y: 3065, size: 91568 },\n  { x: 'Netherlands', y: 2730, size: 41198 },\n  { x: 'Turkey', y: 2542, size: 23507 },\n  { x: 'Hungary', y: 1924, size: 93030 },\n  { x: 'Switzerland', y: 1440, size: 41290 }\n];\n\nconst dataArr = data.map((d) => {\n  return {\n    x: d.x,\n    y: d.size,\n    size: d.size\n  }\n});\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      barData: data,\n      bubbleData: dataArr\n    };\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\" >\n      <Logo>Length of Motorways VS Country size (EU)</Logo>\n        <Wrapper>\n          <div>\n          <p>Length of Motorways</p>\n            <XYPlot\n              margin={{ left: 100, top: 50, bottom: 100 }}\n              xType=\"ordinal\"\n              height={540} width={720}>\n              <VerticalGridLines />\n              <HorizontalGridLines />\n              <XAxis position=\"middle\" title=\"EU Country\" tickLabelAngle={-60} />\n              <YAxis position=\"middle\" title=\"Total length of motorways. (KM)\" />\n              <VerticalBarSeries\n                opacity=\"0.6\"\n                data={this.state.barData} />\n            </XYPlot>\n          </div>\n          <div>\n          <p>Size of country (in Europe)</p>\n            <XYPlot margin={{ left: 100, top: 50, bottom: 100 }} xType=\"ordinal\"\n              height={540} width={720}>\n              <VerticalGridLines />\n              <HorizontalGridLines />\n              <XAxis position=\"middle\" title=\"Country\" tickLabelAngle={-60} />\n              <YAxis position=\"middle\" title=\"Area of country in Europe. (Sq. KMs)\" />\n              <MarkSeries\n                strokeWidth={2}\n                opacity=\"0.8\"\n                sizeRange={[2, 30]} data={this.state.bubbleData} />\n            </XYPlot>\n          </div>\n        </Wrapper>\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}